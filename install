#!/bin/bash
set -u

## GitHub Settings
GITHUB_USERNAME="bbashy"
GITHUB_REPO="seedbox"
GITHUB_BRANCH="master"
GITHUB_URL="https://raw.githubusercontent.com/${GITHUB_USERNAME}/${GITHUB_REPO}/${GITHUB_BRANCH}"

## RTORRENT DOMAINS
RTORRENT_DOMAIN="http://rtorrent.net/downloads"
MIRROR_DOMAIN="https://bashy.im"

## CONFIGURATION
RUTORRENT_GIT="https://github.com/Novik/ruTorrent.git"
RTORRENT="0.9.6"
LIBTORRENT="0.13.6"
## XMLRPC="1.25.29" # works
XMLRPC="latest" # change this to "latest" for latest release
PHP="5.6"

## Use a mirror for the files if the RTORRENT_DOMAIN is unconnectable.
MIRROR=true

## Port for Nginx server to listen on
HTTPS_PORT=888

## Locations for config files
NGINXCONF="$GITHUB_URL/resources/nginx.conf"
NGINX_VHOST_SSL="$GITHUB_URL/resources/rutorrent_ssl"

function GET_SERVER_IP {
	SERVER_IP="$(curl -Ls https://bashy.im/ip)"
}

function MAKE_TEMP_PATH {
	mkdir -vp /tmp/bbashy-seedbox
	TEMP_PATH="/tmp/bbashy-seedbox"
}

function GET_OS_VERSION {
	OS_VERSION=awk -F= '/^ID/{print $2}' /etc/os-release

	if [ OS_VERSION -eq "debian" ]; then
		return 'debian'
	elif [ OS_VERSION -eq "ubuntu" ]; then
		return 'ubuntu'
	else
		return 'unknown'
	fi
}

## Find an echo that supports -e
echo=echo
for cmd in echo /bin/echo; do
	$cmd >/dev/null 2>&1 || continue
	if ! $cmd -e "" | grep -qE '^-e'; then
		echo=$cmd
		break
	fi
done

## Colours for text throughout the script
CSI=$($echo -e "\033[")
C_CYAN="${CSI}1;36m"
C_GREEN="${CSI}1;32m"
C_DGREEN="${CSI}32m"
C_RED="${CSI}1;31m"
C_YELLOW="${CSI}1;33m"
C_BLUE="${CSI}1;34m"
C_MAGENTA="${CSI}1;35m"
C_QUESTION="$C_MAGENTA"
C_WARNING="$C_RED"
C_MSG="$C_CYAN"
C_END="${CSI}0m"

fullExit() {
	cat << EOF
$C_WARNING
============= ERROR =============
$*
============= ERROR =============
$C_END
Contact me: ${C_GREEN}https://bashy.im/about#contact$C_END
EOF
	exit 1
}

## Run user command, ignoring data sent to stdout
runUserCmd() {
	su - \$USER -c "\$USER_INIT; \$1" >/dev/null && return 0
	return 1
}

## Check we're root
if [ "$(id -u)" != "0" ]; then
	fullExit "Run this script as root (with sudo)."
fi

## License
echo "This was made by Ben Sampson - bashy.im - check LICENSE.txt for details
-----------------------------------------------------------------------------

				   _ _
		 ___  ___  ___  __| | |__   _____  __
		/ __|/ _ \/ _ \/ _\` | '_ \ / _ \ \/ /
		\__ \  __/  __/ (_| | |_) | (_) >  <
		|___/\___|\___|\__,_|_.__/ \___/_/\_\\

-----------------------------------------------------------------------------"
echo "This will install the following;"
echo
echo "rTorrent: $RTORRENT"
echo "LibTorrent: $LIBTORRENT"
echo "XML-RPC: $XMLRPC"
echo "Nginx: latest mainline version"
echo "PHP: $PHP"
echo
echo "Using HTTPS Port: $HTTPS_PORT"
echo
echo "Tested on Debian 8 (Jessie) 64-bit. Probably works on Ubuntu with some changes to apt repositories"
echo
echo "y = answers yes (continues)"
echo "n = answers no to normally followed by another option"
echo "c = answers cancel to exit script"
echo "${C_MAGENTA}Capital 'Y/N/C' means the default action if you just press enter$C_END"
echo
read -p "${C_GREEN}Do you want to continue? [Y/n/c]$C_END " confirm
if [[ $confirm =~ ^([cC]|[nN])$ ]]
then
    exit 0
fi

## Generate locales
locale-gen en_GB en_GB.UTF-8
# dpkg-reconfigure locales

## Prompting for system user.
con=0
while [ $con -eq 0 ]; do
	echo -n "${C_GREEN}Enter system username for seedbox files:$C_END "
	read USER

	if [ -z "$USER" ]; then
		echo "${C_WARNING}Error: You must enter a system user!!$C_END"
	elif [ -z $(cat /etc/passwd | grep "^$USER:") ]; then
		read -p "${C_GREEN}Selected user ($USER) does not exist, would you like to create it? [Y/n/c]$C_END " confirm
		if [[ $confirm =~ ^([nN]|[cC])$ ]]
        then
            exit 1
        else
			adduser $USER;
			con=1
			HOMEDIR=$(cat /etc/passwd | grep "$USER": | cut -d: -f6);
		fi
	elif [ $(cat /etc/passwd | grep "^$USER:" | cut -d: -f3) -lt 999 ]; then
		echo "${C_WARNING}Error: That user's UID is too low!$C_END"
	elif [ $USER = nobody ]; then
		echo
		echo "${C_WARNING}Error: You can't use 'nobody' as the user!$C_END"
	else
		HOMEDIR=$(cat /etc/passwd | grep "$USER": | cut -d: -f6);
		con=1
	fi
done

read -p "${C_GREEN}These folders will be added to the directory $HOMEDIR/rtorrent/(downloads, watch, .session, .sockets). Proceed? [Y/c]$C_END " confirm </dev/tty
case "$confirm" in
	y|Y|yes|*)
		su - $USER -c "mkdir -vp rtorrent/{downloads,.session,watch,.sockets}"
		;;
	C|c|cancel)
		exit 1
		;;
esac

## Add the user which will hold the ruTorrent folders for Nginx
function WEBSITE_USER {
	con=0
	while [ $con -eq 0 ]; do
		echo -n "${C_GREEN}Enter username for the ruTorrent files, this uses the normal 'adduser' command [default: websites]:$C_END "
		read WEB_USER

		if [ -z "$WEB_USER" ]; then
			adduser websites --disabled-password
			con=1
		else
			if [ -z $(cat /etc/passwd | grep "$WEB_USER":) ]; then
				read -p "${C_GREEN}This user does not exist, would you like to create it? [Y/n/c]$C_END " confirm </dev/tty
				case "$confirm" in
					n|N|no)
						;;
					c|C|cancel)
						exit 1
						;;
					*)
						adduser $WEB_USER --disabled-password;
						con=1
						;;
				esac
			elif [ $(cat /etc/passwd | grep "^$USER:" | cut -d: -f3) -lt 999 ]; then
				echo "${C_WARNING}Error: That user's UID is too low!$C_END"
			elif [ $WEB_USER = nobody ]; then
				echo
				echo "${C_WARNING}Error: You can't use 'nobody' as the user!$C_END"
			else
				WEB_USER=$WEB_USER
				con=1
			fi
		fi
	done

}

## Run create user for website files
WEBSITE_USER

## If no user is set, redo function
if [ -z $(cat /etc/passwd | grep "$WEB_USER":) ]; then
	WEBSITE_USER
fi

## rTorrent / libTorrent / ruTorrent - install & compile

## Install some required packages
apt-get update
apt-get install -y unrar-free unzip git screen curl openssl apache2-utils \
python-software-properties software-properties-common build-essential automake \
libtool libssl-dev libsigc++-2.0-dev zlib1g-dev libcurl4-openssl-dev libncurses5-dev libcppunit-dev

## Add Nginx and PHP repositories
add-apt-repository "deb http://nginx.org/packages/mainline/debian/ jessie nginx"

## Setup Nginx for our web server
curl -LO http://nginx.org/keys/nginx_signing.key
apt-key add nginx_signing.key
rm nginx_signing.key

apt-get update
apt-get install -y nginx php5-fpm php5-curl php5-cli php5-mcrypt php5

## Download library and client, possible mirror which is settable at the top of this file
MAKE_TEMP_PATH && cd $TEMP_PATH

if [ $MIRROR = true ]; then
	## libTorrent
	curl -LO $MIRROR_DOMAIN/o/libtorrent-$LIBTORRENT.tar.gz
	## rTorrent
	curl -LO $MIRROR_DOMAIN/o/rtorrent-$RTORRENT.tar.gz
else
	## libTorrent
	curl -LO $RTORRENT_DOMAIN/downloads/libtorrent-$LIBTORRENT.tar.gz
	## rTorrent
	curl -LO $RTORRENT_DOMAIN/downloads/rtorrent-$RTORRENT.tar.gz
fi

## XMLRPC
if [ $XMLRPC = "latest" ]; then
	curl -L http://sourceforge.net/projects/xmlrpc-c/files/latest/download -o xmlrpc-c-latest.tar.gz
else
	curl -LO $MIRROR_DOMAIN/o/xmlrpc-c-$XMLRPC.tar.gz
fi

## Extract libraries
tar -zxvf libtorrent-$LIBTORRENT.tar.gz &&
tar -zxvf rtorrent-$RTORRENT.tar.gz &&
mkdir xmlrpc-c-$XMLRPC &&
tar -zxvf xmlrpc-c-$XMLRPC.tar.gz --strip 1 -C xmlrpc-c-$XMLRPC

## Compile XMLRPC
cd xmlrpc-c-$XMLRPC
./configure --disable-cplusplus
make
make install

## Compile libTorrent
cd libtorrent-$LIBTORRENT
./autogen.sh
./configure
make
make install

## Compile rTorrent (needs --prefix=/usr if 7?)
cd rtorrent-$RTORRENT
./autogen.sh
./configure --with-xmlrpc-c
make
make install

## Create the necessary links and cache to the most recent shared libraries
ldconfig

## Remove the shit left behind
read -p "${C_RED}Please confirm the deletion of this path ($TEMP_PATH), there's no turning back afterwards. Type N/n/no to continue without deleting or Y/y/yes to delete [y/N]$C_END " confirm </dev/tty
case "$confirm" in
	N|n|no|*)
		;;
	Y|y|yes)
		rm -rf $TEMP_PATH
		;;
esac

## Create web server sites directory and clone the git repo for ruTorrent
su - $WEB_USER -c "mkdir sites logs && cd sites && git clone $RUTORRENT_GIT rutorrent"

## Modify php.ini for larger file uploads (torrents)
sed -i -e '/memory_limit =/ s/= .*/= 256M/' /etc/php5/fpm/php.ini # Possibly change this higher/lower.
sed -i -e '/post_max_size =/ s/= .*/= 125M/' /etc/php5/fpm/php.ini
sed -i -e '/upload_max_filesize =/ s/= .*/= 100M/' /etc/php5/fpm/php.ini
sed -i -e 's/;date.timezone.*/date.timezone = UTC/' /etc/php5/fpm/php.ini
sed -i -e 's/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/' /etc/php5/fpm/php.ini

# sed -i "s/user = www-data/user = nginx/" /etc/php5/fpm/pool.d/www.conf
# sed -i "s/group = www-data/group = nginx/" /etc/php5/fpm/pool.d/www.conf

sed -i "s/;listen\.owner.*/listen.owner = nginx/" /etc/php5/fpm/pool.d/www.conf
sed -i "s/;listen\.group.*/listen.group = nginx/" /etc/php5/fpm/pool.d/www.conf
## The following is not required but might depending on OS setup
# sed -i "s/;listen\.mode.*/listen.mode = 0660/" /etc/php5/fpm/pool.d/www.conf

## Add the newly created webserveruser to nginx
usermod -a -G www-data $WEB_USER
id $WEB_USER
groups $WEB_USER

## Create htpasswd like file for basic auth login
echo
echo "Enter a new ruTorrent frontend password for $USER"
htpasswd -c /home/${USER}/rutorrent_passwords $USER

## Copy over Nginx files and enable new ruTorrent site
echo
mkdir -vp /etc/nginx/{ssl,sites-available,sites-enabled}

## Output virtual host data into Nginx folder
function create_nginx_config {
	curl -Ls $NGINXCONF | sed -e "s/\###WEB_USER###/${WEB_USER}/"
}

## Output virtual host data into Nginx folder
function CREATE_NGINX_VHOSTS {
	vhost=$(curl -Ls $NGINX_VHOST_SSL |
	sed -e "s/\###HOSTNAME###/${HOSTNAME}/" |
	sed -e "s/\###WEB_USER###/${WEB_USER}/" |
	sed -e "s/\###USER###/${USER}/")

	vhost > /etc/nginx/sites-available/rutorrent_ssl
}

create_nginx_config > /etc/nginx/nginx.conf

## Restart Nginx and php5-fpm
service nginx restart
service php5-fpm restart

GET_SERVER_IP

echo
echo "${C_GREEN}Installation is complete... LOL, yeah right...$C_END"
echo
echo "Check Nginx is working by going to your server's IP address followed by port $HTTP_PORT or $HTTPS_PORT (SSL)"
echo "${C_CYAN}IP: $SERVER_IP:$HTTP_PORT$C_END"
echo "${C_CYAN}IP: $SERVER_IP:$HTTPS_PORT$C_END"
echo
echo "If you wish to disable HTTP, please remove the server block containing the non-SSL section from /etc/nginx/sites-available/rutorrent file"
echo
echo "${C_MAGENTA}Seedboxes done the right way -- https://bashy.im$C_END"
